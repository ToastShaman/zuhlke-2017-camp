version: '3'

services:

  # Have your own Slack like online chat, built with Meteor.
  # https://rocket.chat/
  rocketchat:
    image: rocketchat/rocket.chat:0.56.0
    restart: always
    volumes:
      - ./data/rocketchat/uploads:/app/uploads
    depends_on:
      - mongo
    links: 
      - mongo
    ports:
      - "3000:3000"

  # Hubot is your friendly robot sidekick.
  # https://hubot.github.com/ 
  hubot:
    image: rocketchat/hubot-rocketchat:1.0.8
    restart: always
    environment:
      - ROCKETCHAT_URL=rocketchat:3000
      - ROCKETCHAT_ROOM=
      - LISTEN_ON_ALL_PUBLIC=true
      - ROCKETCHAT_USER=bender
      - ROCKETCHAT_PASSWORD=password
      - BOT_NAME=bender
      - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics,hubot-google,hubot-reddit,hubot-bofh,hubot-bookmark,hubot-shipit,hubot-maps
    depends_on:
      - rocketchat
    links:
      - rocketchat:rocketchat
      - redis
    ports:
      - 3001:8080
    volumes:
      - ./hubot-scripts/scripts:/home/hubot/scripts \

  # GitHub alternative
  # https://about.gitlab.com/
  gitlab:
    restart: always
    image: sameersbn/gitlab:9.2.5
    depends_on:
      - redis
      - postgresql
    links: 
      - redis
      - postgresql
    ports:
      - "10080:80"
      - "10022:22"
    volumes:
      - ./data/gitlab/gitlab:/home/git/data:Z
    environment:
      - GITLAB_SECRETS_DB_KEY_BASE="${GITLAB_SECRETS_DB_KEY_BASE}"         # TODO: Is this working?
      - GITLAB_SECRETS_SECRET_KEY_BASE="${GITLAB_SECRETS_SECRET_KEY_BASE}" # TODO: Is this working?
      - GITLAB_SECRETS_OTP_KEY_BASE="${GITLAB_SECRETS_OTP_KEY_BASE}"       # TODO: Is this working?

      - DB_ADAPTER=postgresql
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=gitlab
      - DB_PASS=password
      - DB_NAME=gitlabhq_production

      - REDIS_HOST=redis
      - REDIS_PORT=6379

      - GITLAB_HOST=localhost
      - GITLAB_PORT=10080
      - GITLAB_SSH_PORT=10022

  # Document Store
  # https://www.mongodb.com/
  mongo:
    image: mongo:3.4.4
    restart: always
    volumes:
     - ./data/mongo:/data/db

  # Key/Value Store
  # https://redis.io/
  redis:
    image: redis:3.2.9
    restart: always
    volumes:
      - ./data/redis:/db

  # Relational Database
  # https://www.postgresql.org/ 
  postgresql:
    restart: always
    image: sameersbn/postgresql:9.6-2
    volumes:
      - ./data/postgresql:/var/lib/postgresql:Z
    environment:
      - DB_USER=gitlab
      - DB_PASS=password
      - DB_NAME=gitlabhq_production
      - DB_EXTENSION=pg_trgm

  # CI that scales with your project
  # https://concourse.ci/
  concourse-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: concourse
      POSTGRES_USER: concourse
      POSTGRES_PASSWORD: changeme
      PGDATA: /database

  concourse-web:
    image: concourse/concourse
    links: 
      - concourse-db
    command: web
    depends_on: 
      - concourse-db
    ports: 
      - "8080:8080"
    volumes: 
      - ./data/concourse/web:/concourse-keys
    restart: unless-stopped # required so that it retries until conocurse-db comes up
    environment:
      CONCOURSE_BASIC_AUTH_USERNAME: concourse
      CONCOURSE_BASIC_AUTH_PASSWORD: changeme
      CONCOURSE_EXTERNAL_URL: "${CONCOURSE_EXTERNAL_URL}"
      CONCOURSE_POSTGRES_HOST: concourse-db
      CONCOURSE_POSTGRES_USER: concourse
      CONCOURSE_POSTGRES_PASSWORD: changeme
      CONCOURSE_POSTGRES_DATABASE: concourse

  concourse-worker:
    image: concourse/concourse
    privileged: true
    links: 
      - concourse-web
    depends_on: 
      - concourse-web
    command: worker
    volumes: 
      - ./data/concourse/worker:/concourse-keys
    environment:
      CONCOURSE_TSA_HOST: concourse-web
      CONCOURSE_GARDEN_DNS_SERVER: 8.8.8.8
